# -*- coding: utf-8 -*-
"""Project 9. Medical Insurance Cost Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hl0doiunxtnD64WyU_TEDv7DfT6ZNdtb

Importing the depenencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data Collection and Analysis"""

# loading the data from CSV file to a pandas dataframe
insurance_data = pd.read_csv('/content/insurance.csv')

# print the first 5 rows of the dataframe
insurance_data.head()

# number of rows and columns
insurance_data.shape

# getting some informations about the dataset
insurance_data.info()

"""Catagorical Features:
- Sex
- Smoking
- Region
"""

# checking the null values
insurance_data.isnull().sum()

"""Data Analysis"""

# statistical measures of the dataset
insurance_data.describe()

# distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['age'])
plt.title('Age Distribution')
plt.show()

# Gender column
plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=insurance_data)
plt.title('Sex Ditribution')
plt.show()

insurance_data['sex'].value_counts()

# bmi distribution
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['bmi'])
plt.title('bmi Distribution')
plt.show()

"""Normal bmi range --> 18.5 to 24.9"""

# children column
plt.figure(figsize=(6,6))
sns.countplot(x='children',data=insurance_data)
plt.title('Children Ditribution')
plt.show()

insurance_data['children'].value_counts()

# smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=insurance_data)
plt.title('Smoker Ditribution')
plt.show()

insurance_data['smoker'].value_counts()

# region column
plt.figure(figsize=(6,6))
sns.countplot(x='region',data=insurance_data)
plt.title('Region Ditribution')
plt.show()

insurance_data['region'].value_counts()

# distribution of charges value
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['charges'])
plt.title('Charges Distribution')
plt.show()

"""Data Pre-processing

Encoding the catagorical features
"""

# encoding the sex column
insurance_data.replace({'sex':{'male':0,'female':1}},inplace=True)

# encoding the smoker column
insurance_data.replace({'smoker':{'yes':0,'no':1}},inplace=True)

# encoding the region column
insurance_data.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}},inplace=True)

print(insurance_data)

"""Splitting the features and target"""

X = insurance_data.drop(columns='charges',axis=1)
Y = insurance_data['charges']

print(X)

print(Y)

"""Splitting the data into Training data and Test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Linear Regression Model
"""

# loading the Linear Regression Model
regressor = LinearRegression()

regressor.fit(X_train,Y_train)

"""Model Evaluation"""

# prediction on training data
training_data_prediction = regressor.predict(X_train)

# R squared value
r2_train = metrics.r2_score(Y_train, training_data_prediction)

print('R squared value:',r2_train)

# prediction on test data
test_data_prediction = regressor.predict(X_test)

# R squared value
r2_test = metrics.r2_score(Y_test, test_data_prediction)

print('R squared value:',r2_test)

"""Building a predictive system"""

input_data = (31,1,25.74,0,1,0)

# changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshape)
print(prediction)

print('The insurance cost is USD:', prediction[0])

